@model ResourceListViewModel
@{
    ViewBag.Title = Resources.Common.ResourceLibrary;

    var catID = Guid.Empty;
    var currentLanguage = string.Empty;
    var curlan = Identity.Current.Language.LanguageDescription;

}

<style>
    .ui-widget-content {
        background: #FFF;
    }
</style>
<div id="resourceManager">
    <h2>
        <span class="pull-right">
            @if (Identity.Current.CustomerID == 1)
            {
                <a class="btn btn-primary" href="@Url.Action("manageresources")">@Resources.Common.ManageResources</a>
            }
        </span>
        <span class="clearfix"></span>
    </h2>
    <div class="space-10"></div>
    <div class="row">
        <div class="col-lg-3">
            <div class="well well-sm hidden-xs">
                <div class="space-10"></div>
                <h5>@Resources.Common.ViewResourcesFor:</h5>
                <div>
                    @Html.DropDownListFor(model => model.Country, new SelectList(Model.CountryList, "Value", "Text", Identity.Current.Country), new { @class = "form-control" })
                </div>
                <div class="space-20"></div>
                <h5>@Resources.Common.Language:</h5>
                <div>
                    @Html.DropDownListFor(model => model.Language, new SelectList(Model.Languages, "LanguageDescription", "LanguageDescription"), "All", new { @class = "form-control" })
                </div>
                <div class="space-20"></div>
                <h5>@Resources.Common.FindByKeyword<a class="pull-right" id="clearKeywords" style="display:none;">@Resources.Common.Clear</a></h5>
                <div class="input-group">
                    @Html.DropDownListFor(model => model.Tags, new MultiSelectList(Model.Tags, "Name", "Name"), new { @class = "form-control", multiple = "multiple" })
                    <span class="input-group-btn">
                        <button class="btn btn-secondary" data-role="searchKeyword" type="button"><i class="fa fa-search"></i></button>
                    </span>
                </div>
                <div class="space-20"></div>
                <h5>@Resources.Common.ResourceCategories<a class="pull-right" id="showallcategories" style="display:none;">@Resources.Common.ShowAll</a></h5>
                <ul id="Category-List" class="list-group-item">
                    @foreach (var category in Model.ResourceCategories.Where(rc => rc.ParentID == Guid.Empty))
                    {

                        var categoryTranslation = Model.CategoryTranslation.Where(ct => ct.CategoryID == category.CategoryID && ct.Language == currentLanguage).FirstOrDefault();
                        var categoryDescription = categoryTranslation == null ? category.CategoryDescription : categoryTranslation.TranslatedCategoryDescription;

                        if (Model.ResourceCategories.Where(rc => rc.ParentID == category.CategoryID).Any())
                        {
                            <li data-id="@category.CategoryID">
                                <span data-toggle="collapse" data-target="#Sub-@category.CategoryID"><i class="fa fa-plus-square-o"></i></span> <a data-role="categoryFilter" id="@category.CategoryID">@categoryDescription</a>
                                <ul id="Sub-@category.CategoryID" class="collapse">
                                    @foreach (var subCategory in Model.ResourceCategories.Where(rc => rc.ParentID == category.CategoryID))
                                    {
                                        var subCategoryTranslation = Model.CategoryTranslation.Where(ct => ct.CategoryID == subCategory.CategoryID && ct.Language == currentLanguage).FirstOrDefault();
                                        var subCategoryDescription = categoryTranslation == null ? subCategory.CategoryDescription : subCategoryTranslation.TranslatedCategoryDescription;
                                        <li data-id="@subCategory.CategoryID">
                                            <a data-role="categoryFilter" id="@subCategory.CategoryID">@subCategoryDescription</a>
                                        </li>
                                    }
                                </ul>

                            </li>
                        }
                        else
                        {
                            <li data-id="@category.CategoryID" class="paddingleft15">
                                <a data-role="categoryFilter" id="@category.CategoryID">@categoryDescription</a>
                            </li>
                        }
                    }

                </ul>

                <div class="space-20"></div>
                <h5>@Resources.Common.FindByMedia<a class="pull-right" id="applyFilter" style="display:none;">@Resources.Common.ApplyFilter</a><a class="pull-right" id="clearFilter" style="display:none;">@Resources.Common.ClearFilter</a></h5>
                <div class="list-group-item">
                    <ul style="padding-left:0;" id="marketFilter">
                        @foreach (var mediaType in Model.ResourceTypes)
                        {
                            <li><input type="checkbox" name="@mediaType.TypeDescription" value="@mediaType.TypeDescription" /> @mediaType.TypeDescription</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-9" id="resourcelist-target">

        </div>
    </div>

    <!-- script -->
</div>
<script>

    require(["jquery", "ajax", "jquery-ui", "select2"], function ($, ajax, jqueryui, select2) {

        var context = $("#resourceManager"),
            $context = $(context),
            sortCategoryByDatUrl = '@Url.Action("SortCategoryByDate","Resources")';

        var oldID = @Model.CategoryID,
            FilteredCategory = "",
            FilteredMedia = [],
            FilteredMarket = "",
            FilteredLanguage = "",
            keywords = [],
            isFiltered = false;


        function registerEventHandlers(){

            $context.on("click", ".dateHeader", function () {
                var $this = $(this),
                    isAscending = $this.hasClass("asc"),
                    isDescending = $this.hasClass("desc"),
                    categoryId = $(this).parents('.categoryDetail').first().data("id"),
                    sortType = "";

                if(isAscending)
                {
                    $this.removeClass("asc");
                    $this.addClass("desc");
                    sortType = "desc";
                }
                else if(isDescending)
                {
                    $this.removeClass("desc");
                }
                else {
                    $this.addClass("asc");
                    sortType = "asc";
                }

                actions.sortCategoryByDate(categoryId, sortType);
            });

            $context.on("click","[data-role='searchKeyword']", function () {
                keywords = $("#Tags").val()
                if(keywords !== "undefined" || keywords.length() > 0){
                    getResourceList();
                }
            });

            $context.on("click","#clearKeywords", function () {
                keywords = [];
                $("#Tags").val("").trigger('change');
                $("#clearKeywords").hide();
                getResourceList();
            });

            $context.on("click", "#Category-List li span", function () {
                $(this).find('i').toggleClass('fa-plus-square-o fa-minus-square-o')
            });

            $("[data-role='categoryFilter']").on("click", function () {
                FilteredCategory = JSON.stringify($(this).attr('id'));
                getResourceList();
                $("#Category-List").find("li").each(function(){ $(this).removeClass("highlight")})
                $(this).parent().addClass("highlight");
                $("#showallcategories").show();
            });

            $("#showallcategories").on("click", function () {
                FilteredCategory = "";
                getResourceList();
                $("#Category-List").find("li").each(function(){ $(this).removeClass("highlight")})
                $("#showallcategories").hide();

            });

            $("#marketFilter").on("change", function () {
                FilteredMedia = [];
                var listitems = $(this).find('li');
                $.each(listitems, function ()
                {
                    var y = $(this).find('input[type=checkbox]');
                    if($(y).is(":checked"))
                    {
                        FilteredMedia.push($(y).val());
                    }
                })
                if(FilteredMedia.length > 0){
                    $("#applyFilter").show();
                }
                else{
                    $("#applyFilter").hide();
                }
                console.log(isFiltered);
                console.log(FilteredMedia);
                if(isFiltered && FilteredMedia.length <= 0){
                    $("#clearFilter").show()
                }
                else{
                    $("#clearFilter").hide()
                }
            });

            $("#applyFilter").on("click", function () {
                getResourceList();
            });

            $("#clearFilter").on("click", function () {
                isFiltered = false;
                getResourceList();
                $(this).hide()
            });

            $("#Country").on("change", function () {
                FilteredMarket = $(this).val();
                getResourceList();
            });

            $("#Language").on("change", function () {
                FilteredLanguage = $(this).val();
                getResourceList();
            });

        }
        var actions = {
            createSelectList: function(){
                $("#Tags").select2({
                    value:"",
                    tags: true,
                    multiple:true,
                    placeholder: '@Resources.Common.SelectAKeyword',

                })
            },
            sortCategoryByDate: function(categoryId, sortType){
                var categories = '@Html.Raw(Json.Encode(Model.ResourceCategories))';
                var filter = {
                    MediaFilter: FilteredMedia,
                    Categories: categories,
                    MarketFilter: FilteredMarket,
                    CategoryFilter: FilteredCategory,
                    LanguageFilter: FilteredLanguage,
                    LanguageFilter: FilteredLanguage,
                    KeyWord: keywords
                };

                ajax.json({
                    url: sortCategoryByDatUrl,
                    data: {
                        categoryID: categoryId,
                        sortType: sortType,
                        filter: filter
                    },
                    success: function (response) {
                        if (response.success) {
                            var $categoryTableBody = $(".panel[data-id='"+ categoryId +"'] tbody");

                            console.log("$categoryTableBody.length: ", $categoryTableBody.length);

                            $categoryTableBody.html(response.html);
                        }
                    },
                    error: function (response) {
                        //console.log(response.message, "Error");
                    }
                });
            }
        }

        function getResourceList() {
            var categories = '@Html.Raw(Json.Encode(Model.ResourceCategories))';
            var filter = {
                MediaFilter: FilteredMedia,
                Categories: categories,
                MarketFilter: FilteredMarket,
                CategoryFilter: FilteredCategory,
                LanguageFilter: FilteredLanguage,
                LanguageFilter: FilteredLanguage,
                KeyWord: keywords
            };


            ajax.json({
                url: '@Url.Action("getresourcelist","resources")',
                data: { filter: filter },
                success: function (response) {
                    if (!response.success) {
                        console.log(response.message);
                        return;
                    }
                    isFiltered = response.isFiltered;
                    var $html = $("#resourcelist-target");
                    $html.html(response.html);
                    if(keywords != ""){
                        $("#clearKeywords").show();
                    }

                },
                error: function (response) {
                    console.log(response.message, "Error");
                }
            });
        }



        function init() {
            registerEventHandlers()
            actions.createSelectList();

            $('#Country').trigger('change');

        }


        $(init);@*Methd called when the form is called*@
    });
</script>
