@model GetCustomerRankQualificationsResponse
@{
    var uniqueID = Guid.NewGuid().ToString();
    var isHighestRank = (Model == null);
    if (Model.IsUnavailable) { throw new Exception("Unavailable"); }
}


<div class="card card-default card-metrics" id="view-rankadvancementcard-@uniqueID">
    <div class="card-heading">
        <h3 class="card-title">
            @Resources.Common.PromotionStatus
        </h3>
    </div>
    <div class="card-body text-center">
        @if (isHighestRank)
        {
            <small class="text-muted text-uppercase">@Resources.Common.NextRank</small>
            <div class="lead">---</div>
        }
        else
        {
        <small class="text-muted text-uppercase">@Resources.Common.NextRank</small>
        <div class="lead">@Model.Rank.RankDescription</div>

        <input class="dial-chart"
               value="@Math.Ceiling(Model.TotalPercentComplete).ToString("N0")"
               data-width="180"
               data-height="180"
               data-min="0"
               data-max="100"
               data-skin="tron"
               data-fgcolor="#666"
               data-thickness=".15"
               data-readonly="true" />
        }
    </div>
    <a href="@Url.Action("rank", "commissions")" class="card-footer block text-right">
        @Resources.Common.ViewPromotionDetails <i class="fa-chevron-right"></i>
    </a>
</div>

<script>
    require(["jquery", "jquery-knob"], function ($) {

        // Settings
        var context = "#view-rankadvancementcard-@uniqueID",
            $context = $(context);

        // Initialization
        function init() {
            $('.dial-chart', $context).dial({
                format: function (value) {
                    return value + "%";
                },
                draw: function () {

                    // "tron" case
                    if (this.$.data('skin') == 'tron') {

                        var a = this.angle(this.cv)  // Angle
                            , sa = this.startAngle          // Previous start angle
                            , sat = this.startAngle         // Start angle
                            , ea                            // Previous end angle
                            , eat = sat + a                 // End angle
                            , r = true;

                        this.g.lineWidth = this.lineWidth;

                        this.o.cursor
                            && (sat = eat - 0.3)
                            && (eat = eat + 0.3);

                        if (this.o.displayPrevious) {
                            ea = this.startAngle + this.angle(this.value);
                            this.o.cursor
                                && (sa = ea - 0.3)
                                && (ea = ea + 0.3);
                            this.g.beginPath();
                            this.g.strokeStyle = this.previousColor;
                            this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sa, ea, false);
                            this.g.stroke();
                        }

                        this.g.beginPath();
                        this.g.strokeStyle = r ? this.o.fgColor : this.fgColor;
                        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth, sat, eat, false);
                        this.g.stroke();

                        this.g.lineWidth = 2;
                        this.g.beginPath();
                        this.g.strokeStyle = this.o.fgColor;
                        this.g.arc(this.xy, this.xy, this.radius - this.lineWidth + 1 + this.lineWidth * 2 / 3, 0, 2 * Math.PI, false);
                        this.g.stroke();

                        return false;
                    }
                }
            });
        }
        init();

    });
</script>