@model TreeViewerViewModel
@{
    var title = ViewBag.Title = Resources.Common.TreeViewer;

    int ownerID = Model.OwnerCustomerID;
    var isLoggedInUser = ownerID == Identity.Current.CustomerID;
}
@{ var headerText = title; }
@if (isLoggedInUser)
{
    <h2>
        @ViewBag.Title
    </h2>
}
else
{
    var nameDisplay = !Model.OwnerName.IsNullOrEmpty() ? Model.OwnerName : "# " + ownerID;

    <div class="row">
        <div class="col-xs-3">
            <img src="@Url.Avatar(ownerID)" class="avatar avatar-sm" />
        </div>
        <div class="col-xs-9">
            <h2>
                <a data-profile="modal" data-id="@ownerID" data-token="@Model.Token">
                    @nameDisplay's - @title
                </a>
            </h2>
            <small><a href="@Url.Action("TreeViewer", "Organization")"><i class="fa-arrow-left"></i> Back to My Tree</a></small>
        </div>
    </div>
}
<div id="view-tree-viewer">
    <div id="tree-container">
        <h2>Tree Viewer Loading</h2>
        <img class="loading-image" src="~/Content/images/loading/circle-64.gif" />
    </div>
</div>
<style>
    #tree-container {
        height: 600px;
        width: 100%;
        background-color: #fff;
        border: 2px solid #ccc;
        border-radius:5px;
        text-align: center;
    }

        #tree-container h2 {
            margin: 20px;
            padding-top: 20px;
            text-align: center;
        }

        #tree-container .loading-image {
            display: block;
            margin: 0 auto;
        }

    .node {
        cursor: pointer;
    }

    .downline-popover {
        display: block;
    }

    .overlay {
        background-color: #fff;
    }

    .node circle {
        fill: #fff;
        stroke: steelblue;
        stroke-width: 1.5px;
    }

    .node text {
        font-size: 11px;
        font-family: sans-serif;
    }

    .link {
        fill: none;
        stroke: #ccc;
        stroke-width: 1.5px;
    }

    .templink {
        fill: none;
        stroke: red;
        stroke-width: 3px;
    }

    .ghostCircle.show {
        display: block;
    }

    .ghostCircle {
        display: none;
    }

    .downline-popover i {
        color: black;
    }
</style>
<!--
    1. Load top 3 levels
    2. When a node is expanded, check the child nodes
        a. If none exist for the child nodes up to 3 levels down, load them


    EXAMPLE: This tree moves parents to the left as you expand: http://jsfiddle.net/nw577/1/
-->
@section scripts
{
    <script>
        require(["jquery", "ajax", "app", "toastr", "handlebars", "d3", "trees", "jquery-scrollto", "extensions"], function ($, ajax, app, toastr, Handlebars, d3) {

            var fetchTreeUrl = '@Url.Action("FetchTree")';
            var customerID = @ownerID;

            // size of the diagram
            var $tree = $("#tree-container");
            var viewerWidth = $tree.width()-5; // $(document).width();
            var viewerHeight = $tree.height()-5; //$(document).height();


            // Misc. variables
            var duration = 750;
            var tree, root, svgGroup, diagonal, zoomListener;
            var maxLabelLength = 0;
            var i = 0;

            // Calculate total nodes, max label length
            var totalNodes = 0;
            var selectedNode = null;
            // panning variables
            var panSpeed = 200;
            var panBoundary = 20; // Within 20px from edges will pan when dragging.

            ajax.json({
                url: fetchTreeUrl,
                data: { id: customerID },
                success: function(response) {

                    if(response.success) {
                        if (response.jsonTree != null) {
                            treeData = JSON.parse(response.jsonTree);
                            buildTree();
                        }
                    } else {
                        console.log(response);
                    }
                }
            });

            function buildTree() {

                tree = d3.layout.tree()
                    .size([viewerHeight, viewerWidth]);

                // define a d3 diagonal projection for use by the node paths later on.
                diagonal = d3.svg.diagonal()
                    .projection(function (d) {
                        return [d.y, d.x];
                    });

                // Call visit function to establish maxLabelLength
                visit(treeData, function (d) {
                    totalNodes++;
                    maxLabelLength = Math.max(d.Customer.FirstName.length + d.Customer.LastName.length + 1, maxLabelLength);

                }, function (d) {
                    return d.children && d.children.length > 0 ? d.children : null;
                });

                // Sort the tree initially incase the JSON isn't in a sorted order.
                //sortTree();

                // define the zoomListener which calls the zoom function on the "zoom" event constrained within the scaleExtents
                zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on("zoom", zoom);

                // define the baseSvg, attaching a class for styling and the zoomListener
                $tree.html("");
                var baseSvg = d3.select("#tree-container").append("svg")
                    .attr("width", viewerWidth)
                    .attr("height", viewerHeight)
                    .attr("class", "overlay")
                    .call(zoomListener);

                var overCircle = function (d) {
                    selectedNode = d;
                    updateTempConnector();
                };
                var outCircle = function (d) {
                    selectedNode = null;
                    updateTempConnector();
                };

                // Append a group which holds all nodes and which the zoom Listener can act upon.
                svgGroup = baseSvg.append("g");

                // Define the root
                root = treeData;
                root.x0 = viewerHeight / 2;
                root.y0 = 0;

                // Layout the tree initially and center on the root node.
                //tree.nodes(root).forEach(function (n) { toggle(n); });
                //root.children.forEach(function(n) {
                //    if(n.children.length > 0) {

                //        n.children.forEach(function(o) {
                //            if (o.children.length > 0) {
                //                toggle(o);
                //            }
                //        });

                //        toggle(n);
                //    }
                //});

                root.children.forEach(collapse);

                update(root);
                leftAlignNode(root);

                // open popovers
                $('svg').on({
                    mouseenter: function(event) {
                        $('.downline-popover').remove();
                        var id = $(this).siblings('id').text();
                        var rank = $(this).siblings('rank').text();
                        var profileID = $(this).siblings('profileid').text();
                        var yCompensation = 0;
                        if ($(this).siblings('block_email').text() == 'true') var email_form = Resources.Common.Email + ':';
                        else var email_form = '<i class="link fa fa-envelope"></i>';
                        if ($(this).siblings('block_sms').text() == 'true') var sms_form = Resources.Common.Phone + ':';
                        else var sms_form = '<i class="link fa fa-mobile-phone"></i>';
                        if ($(this).siblings('phone').text() !== '') var phone = '<tr><th>' + sms_form + '</th><td>' + $(this).siblings('phone').text() + '</td></tr>';
                        else {
                            var phone = '';
                            yCompensation += 20;
                        }
                        if ($(this).siblings('email').text() !== '') var email = '<tr><th>' + email_form + '</th><td>' + $(this).siblings('email').text() + '</td></tr>';
                        else {
                            var email = '';
                            yCompensation += 20;
                        }
                        mouseX = event.pageX - 180;
                        mouseY = event.pageY - 110 + yCompensation;
                        // currentMousePos.y = event.pageY;

                        $('body').prepend(
                            '<div class="popover downline-popover fade top in" role="tooltip" style="z-index: 1000; position: absolute; top:' + mouseY + 'px; left:' + mouseX + 'px">' +
                                '<div style="left: 60%;" class="arrow"></div><div class="popover-content">' +
                                    '<table>' +
                                        '<tr><th>ID:</th><td>' + id + '<div class="pull-right"><a title="View details" data-profile="modal" data-id="' + id + '" data-token="' + profileID + '"><i class="fa fa-eye"></i></a> <a title="View downline" href="@Url.Action("treeviewer", "organization")?token=' + profileID + '"><i class="fa fa-sitemap"></i></a></div><td></tr>' +
                                        '<tr><th>' + Resources.Common.Rank + ':</th><td>' + rank + '</td></tr>' +
                                        phone +
                                        email +
                                    '</table>' +
                                '</div>' +
                            '</div>'
                        );
                    }
                }, ' text');

                // close popovers
                $('svg').click(function() {
                    $(".downline-popover").remove();
                });
                $('g').on({
                    mouseout: function() {
                        reenter = false;
                        time = setTimeout(function() {
                            $('body').on({
                                mouseenter: function() {
                                    reenter = true;
                                    //clearTimeout(timer);
                                }
                            }, ' .downline-popover');
                            if (reenter == false) $('.downline-popover').remove();
                        }, 5000);
                    }
                }, ' text');
            }

            // A recursive helper function for performing some setup by walking through all nodes
            function visit(parent, visitFn, childrenFn) {
                if (!parent) return;

                visitFn(parent);

                var children = childrenFn(parent);
                if (children) {
                    var count = children.length;
                    for (var i = 0; i < count; i++) {
                        visit(children[i], visitFn, childrenFn);
                    }
                }
            }

            // TODO: Pan function, can be better implemented.
            function pan(domNode, direction) {
                var speed = panSpeed;
                if (panTimer) {
                    clearTimeout(panTimer);
                    translateCoords = d3.transform(svgGroup.attr("transform"));
                    if (direction == 'left' || direction == 'right') {
                        translateX = direction == 'left' ? translateCoords.translate[0] + speed : translateCoords.translate[0] - speed;
                        translateY = translateCoords.translate[1];
                    } else if (direction == 'up' || direction == 'down') {
                        translateX = translateCoords.translate[0];
                        translateY = direction == 'up' ? translateCoords.translate[1] + speed : translateCoords.translate[1] - speed;
                    }
                    scaleX = translateCoords.scale[0];
                    scaleY = translateCoords.scale[1];
                    scale = zoomListener.scale();
                    svgGroup.transition().attr("transform", "translate(" + translateX + "," + translateY + ")scale(" + scale + ")");
                    d3.select(domNode).select('g.node').attr("transform", "translate(" + translateX + "," + translateY + ")");
                    zoomListener.scale(zoomListener.scale());
                    zoomListener.translate([translateX, translateY]);
                    panTimer = setTimeout(function () {
                        pan(domNode, speed, direction);
                    }, 50);
                }
            }

            // Define the zoom function for the zoomable tree
            function zoom() {
                svgGroup.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
            }

            // Function to center node when clicked/dropped so node doesn't get lost when collapsing/moving with large amount of children.
            function centerNode(source) {
                scale = zoomListener.scale();
                x = -source.y0;
                y = -source.x0;
                x = x * scale + viewerWidth / 2;
                y = y * scale + viewerHeight / 2;
                d3.select('g').transition()
                    .duration(duration)
                    .attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
                zoomListener.scale(scale);
                zoomListener.translate([x, y]);
            }

            function leftAlignNode(source) {
                scale = zoomListener.scale();
                x = -source.y0;
                y = -source.x0;
                x = (x * scale) + 100;
                y = y * scale + viewerHeight / 2;
                d3.select('g').transition()
                    .duration(duration)
                    .attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
                zoomListener.scale(scale);
                zoomListener.translate([x, y]);
            }

            // Toggle children function

            function toggleChildren(d) {
                if (d.children) {
                    d._children = d.children;
                    d.children = null;
                } else if (d._children) {
                    d.children = d._children;
                    d._children = null;
                }
                return d;
            }

            function toggle(d) {
                if (d.children) {
                    d._children = d.children;
                    d.children = null;
                } else {
                    d.children = d._children;
                    d._children = null;
                }
            }

            function collapse(d) {
                if (d.children.length > 0) {
                    d._children = d.children;
                    d._children.forEach(collapse);
                    d.children = null;
                }
            }

            // Toggle children on click.

            function click(d) {
                //if (d3.event.defaultPrevented) return; // click suppressed

                if (d._children != null) {
                    var isCollapsed = true
                } else {
                    var isCollapsed = false;
                }

                d = toggleChildren(d);
                update(d);

                if (isCollapsed) {
                    leftAlignNode(d);
                } else {
                    centerNode(d);
                }
            }

            function update(source) {
                // Compute the new height, function counts total children of root node and sets tree height accordingly.
                // This prevents the layout looking squashed when new nodes are made visible or looking sparse when nodes are removed
                // This makes the layout more consistent.
                var levelWidth = [1];
                var childCount = function (level, n) {
                    if (n.children && n.children.length > 0) {
                        if (levelWidth.length <= level + 1) levelWidth.push(0);

                        levelWidth[level + 1] += n.children.length;
                        n.children.forEach(function (d) {
                            childCount(level + 1, d);
                        });
                    }
                };
                childCount(0, root);
                var newHeight = d3.max(levelWidth) * 80; // 80 pixels per line
                tree = tree.size([newHeight, viewerWidth]);

                // Compute the new tree layout.
                var nodes = tree.nodes(root).reverse(),
                    links = tree.links(nodes);

                // Set widths between levels based on maxLabelLength.
                nodes.forEach(function (d) {
                    d.y = (d.depth * (maxLabelLength * 15)); //maxLabelLength * 15px
                    // alternatively to keep a fixed scale one can set a fixed depth per level
                    // Normalize for fixed-depth by commenting out below line
                    // d.y = (d.depth * 500); //500px per level.
                });

                // Update the nodes…
                node = svgGroup.selectAll("g.node")
                    .data(nodes, function (d) {
                        return d.id || (d.id = ++i);
                    });

                // Enter any new nodes at the parent's previous position.
                var nodeEnter = node.enter().append("g")
                    .attr("class", "node")
                    .attr("transform", function (d) {
                        return "translate(" + source.y0 + "," + source.x0 + ")";
                    })
                    .on('click', click);

                nodeEnter.append("circle")
                    .attr('class', 'nodeCircle')
                    .attr("r", 0)
                    .style("fill", function (d) {
                        return d._children ? "lightsteelblue" : "#fff";
                    });

                nodeEnter.append("text")
                    .attr("x", function (d) {
                        return d.children || d._children ? -10 : 10;
                    })
                    .attr("dy", ".35em")
                    .attr('class', 'nodeText')
                    .attr("text-anchor", function (d) {
                        return d.children || d._children ? "end" : "start";
                    })
                    .text(function (d) {
                        return d.Customer.FirstName + " " + d.Customer.LastName;
                    })
                    .style("fill-opacity", 0);

                // phantom node to give us mouseover in a radius around it
                nodeEnter.append("circle")
                    .attr('class', 'ghostCircle')
                    .attr("r", 30)
                    .attr("opacity", 0.2) // change this to zero to hide the target area
                .style("fill", "red")
                    .attr('pointer-events', 'mouseover')
                    .on("mouseover", function (node) {
                        overCircle(node);
                    })
                    .on("mouseout", function (node) {
                        outCircle(node);
                    });

                nodeEnter.append('id').text(function(d) { return d.CustomerID; });
                nodeEnter.append('rank').text(function(d) { return d.CurrentRank.RankDescription; });
                nodeEnter.append('phone').text(function(d) { return d.Customer.PrimaryPhone; });
                nodeEnter.append('email').text(function(d) { return d.Customer.Email; });
                nodeEnter.append('profileid').text(function(d) { return d.ProfileID; });

                // Update the text to reflect whether node has children or not.
                node.select('text')
                    .attr("x", function (d) {

                        return d.children || d._children ? -10 : 10;
                    })
                    .attr("text-anchor", function (d) {
                        return d.children || d._children ? "end" : "start";
                    })
                    .text(function (d) {
                        return d.Customer.FirstName + " " + d.Customer.LastName;
                    });

                // Change the circle fill depending on whether it has children and is collapsed
                node.select("circle.nodeCircle")
                    .attr("r", 4.5)
                    .style("fill", function (d) {
                        return d._children ? "lightsteelblue" : "#fff";
                    });

                $('.downline-popover').remove();

                // Transition nodes to their new position.
                var nodeUpdate = node.transition()
                    .duration(duration)
                    .attr("transform", function (d) {
                        return "translate(" + d.y + "," + d.x + ")";
                    });

                // Fade the text in
                nodeUpdate.select("text")
                    .style("fill-opacity", 1);

                // Transition exiting nodes to the parent's new position.
                var nodeExit = node.exit().transition()
                    .duration(duration)
                    .attr("transform", function (d) {
                        return "translate(" + source.y + "," + source.x + ")";
                    })
                    .remove();

                nodeExit.select("circle")
                    .attr("r", 0);

                nodeExit.select("text")
                    .style("fill-opacity", 0);

                // Update the links…
                var link = svgGroup.selectAll("path.link")
                    .data(links, function (d) {
                        return d.target.id;
                    });

                // Enter any new links at the parent's previous position.
                link.enter().insert("path", "g")
                    .attr("class", "link")
                    .attr("d", function (d) {
                        var o = {
                            x: source.x0,
                            y: source.y0
                        };
                        return diagonal({
                            source: o,
                            target: o
                        });
                    });

                // Transition links to their new position.
                link.transition()
                    .duration(duration)
                    .attr("d", diagonal);

                // Transition exiting nodes to the parent's new position.
                link.exit().transition()
                    .duration(duration)
                    .attr("d", function (d) {
                        var o = {
                            x: source.x,
                            y: source.y
                        };
                        return diagonal({
                            source: o,
                            target: o
                        });
                    })
                    .remove();

                // Stash the old positions for transition.
                nodes.forEach(function (d) {
                    d.x0 = d.x;
                    d.y0 = d.y;
                });
            }

        });
    </script>
}